#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
IDCA Security Assessment - Rapor G√∂rselle≈ütirici D√úZELTILMI≈û FINAL
T√ºrk√ße karakter desteƒüi ve tablo veri giri≈üi ile
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.patches as mpatches
from matplotlib.patches import FancyBboxPatch
import pandas as pd
import numpy as np
import json
import os
from datetime import datetime
import warnings
import sys
import locale

# T√ºrk√ße karakter encoding ayarlarƒ±
if sys.platform.startswith('win'):
    locale.setlocale(locale.LC_ALL, 'Turkish_Turkey.1254')
else:
    locale.setlocale(locale.LC_ALL, 'tr_TR.UTF-8')

warnings.filterwarnings('ignore')

# Matplotlib T√ºrk√ße karakter desteƒüi - G√úNCELLENDƒ∞
plt.rcParams['font.family'] = ['DejaVu Sans', 'Arial Unicode MS', 'Tahoma', 'sans-serif']
plt.rcParams['font.sans-serif'] = ['DejaVu Sans', 'Arial Unicode MS', 'Tahoma']
plt.rcParams['axes.unicode_minus'] = False
plt.rcParams['pdf.fonttype'] = 42
plt.rcParams['ps.fonttype'] = 42

# Matplotlib backend ayarƒ±
import matplotlib
matplotlib.use('TkAgg')

class TableEntry(ttk.Frame):
    """Tablo ≈üeklinde veri giri≈üi i√ßin √∂zel widget"""
    def __init__(self, parent, columns, rows=10, **kwargs):
        super().__init__(parent, **kwargs)
        
        self.columns = columns
        self.rows = rows
        self.entries = []
        
        # Ba≈ülƒ±klar
        for j, col in enumerate(columns):
            label = ttk.Label(self, text=col, font=('Arial', 10, 'bold'),
                            background='#2c3e50', foreground='white')
            label.grid(row=0, column=j, sticky='ew', padx=1, pady=1)
        
        # Giri≈ü h√ºcreleri
        for i in range(1, rows + 1):
            row_entries = []
            for j in range(len(columns)):
                entry = ttk.Entry(self, font=('Arial', 10))
                entry.grid(row=i, column=j, sticky='ew', padx=1, pady=1)
                row_entries.append(entry)
            self.entries.append(row_entries)
        
        # Grid aƒüƒ±rlƒ±klarƒ±
        for j in range(len(columns)):
            self.grid_columnconfigure(j, weight=1)
    
    def get_data(self):
        """Tablo verilerini al"""
        data = []
        for row in self.entries:
            row_data = [entry.get().strip() for entry in row]
            if any(row_data):  # En az bir h√ºcre doluysa
                data.append(row_data)
        return data
    
    def set_data(self, data):
        """Tabloya veri y√ºkle"""
        for i, row_data in enumerate(data):
            if i < len(self.entries):
                for j, value in enumerate(row_data):
                    if j < len(self.entries[i]):
                        self.entries[i][j].delete(0, tk.END)
                        self.entries[i][j].insert(0, str(value))
    
    def clear(self):
        """Tabloyu temizle"""
        for row in self.entries:
            for entry in row:
                entry.delete(0, tk.END)
    
    def add_row(self):
        """Yeni satƒ±r ekle"""
        row_entries = []
        row_num = len(self.entries) + 1
        for j in range(len(self.columns)):
            entry = ttk.Entry(self, font=('Arial', 10))
            entry.grid(row=row_num, column=j, sticky='ew', padx=1, pady=1)
            row_entries.append(entry)
        self.entries.append(row_entries)

class IDCAFixedFinal:
    def __init__(self, root):
        self.root = root
        self.root.title("IDCA Security Assessment - Rapor G√∂rselle≈ütirici v5.0 FINAL")
        
        # Pencere boyutu ve pozisyon
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        window_width = min(1600, screen_width - 100)
        window_height = min(900, screen_height - 100)
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        
        # T√ºrk√ße karakter i√ßin encoding
        self.root.option_add('*Font', 'Arial 10')
        
        # Tema renkleri ve ≈üeffaf arkaplan se√ßeneƒüi
        self.transparent_bg = tk.BooleanVar(value=True)  # Varsayƒ±lan ≈üeffaf
        self.current_theme = 'Varsayƒ±lan'
        
        # Varsayƒ±lan tema
        self.colors = {
            'primary': '#0F172A',
            'secondary': '#1E293B',
            'accent': '#00D9FF',
            'accent_secondary': '#7C3AED',
            'success': '#10B981',
            'warning': '#F59E0B',
            'danger': '#EF4444',
            'dark': '#020617',
            'light': '#F8FAFC',
            'gray': '#64748B'
        }
        
        # Tema listesi
        self.themes = {
            'Varsayƒ±lan': {
                'primary': '#0F172A', 'secondary': '#1E293B', 'accent': '#00D9FF',
                'accent_secondary': '#7C3AED', 'success': '#10B981', 'warning': '#F59E0B',
                'danger': '#EF4444', 'dark': '#020617', 'light': '#F8FAFC', 'gray': '#64748B'
            },
            'Profesyonel': {
                'primary': '#1a1a2e', 'secondary': '#16213e', 'accent': '#0f3460',
                'accent_secondary': '#533483', 'success': '#53c653', 'warning': '#e94560',
                'danger': '#ff1744', 'dark': '#0f0f0f', 'light': '#eaeaea', 'gray': '#7a7a7a'
            },
            'Modern': {
                'primary': '#2d3436', 'secondary': '#636e72', 'accent': '#00b894',
                'accent_secondary': '#6c5ce7', 'success': '#55efc4', 'warning': '#fdcb6e',
                'danger': '#ff7675', 'dark': '#2d3436', 'light': '#dfe6e9', 'gray': '#b2bec3'
            },
            'Klasik': {
                'primary': '#2c3e50', 'secondary': '#34495e', 'accent': '#3498db',
                'accent_secondary': '#9b59b6', 'success': '#2ecc71', 'warning': '#f39c12',
                'danger': '#e74c3c', 'dark': '#1a1a1a', 'light': '#ecf0f1', 'gray': '#95a5a6'
            },
            'A√ßƒ±k': {
                'primary': '#ffffff', 'secondary': '#f5f5f5', 'accent': '#2196F3',
                'accent_secondary': '#673AB7', 'success': '#4CAF50', 'warning': '#FF9800',
                'danger': '#F44336', 'dark': '#ffffff', 'light': '#212121', 'gray': '#757575'
            }
        }
        
        # Veri yapƒ±sƒ±
        self.init_data()
        
        # GUI olu≈ütur
        self.create_gui()
        
        # Ba≈ülangƒ±√ß mesajƒ±
        self.show_welcome()
    
    def init_data(self):
        """Veri yapƒ±sƒ±nƒ± ba≈ülat"""
        self.data = {
            'general': {},
            'test_results': {},
            'mitre_tactics': {},
            'triggered_rules': [],
            'undetected_techniques': [],
            'recommendations': []
        }
    
    def create_gui(self):
        """Ana GUI olu≈ütur"""
        # Stil ayarlarƒ±
        style = ttk.Style()
        style.theme_use('clam')
        
        # Ana container
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # √úst toolbar
        self.create_toolbar(main_frame)
        
        # Ana i√ßerik alanƒ± - PanedWindow
        self.paned = ttk.PanedWindow(main_frame, orient=tk.HORIZONTAL)
        self.paned.pack(fill=tk.BOTH, expand=True, pady=5)
        
        # Sol panel - Veri giri≈üi
        left_frame = ttk.Frame(self.paned)
        self.paned.add(left_frame, weight=3)
        
        # Saƒü panel - √ñnizleme
        right_frame = ttk.Frame(self.paned)
        self.paned.add(right_frame, weight=2)
        
        # Sol panel i√ßeriƒüi
        self.create_data_panel(left_frame)
        
        # Saƒü panel i√ßeriƒüi
        self.create_preview_panel(right_frame)
        
        # Durum √ßubuƒüu
        self.create_status_bar(main_frame)
    
    def create_toolbar(self, parent):
        """√úst ara√ß √ßubuƒüu"""
        toolbar = ttk.Frame(parent)
        toolbar.pack(fill=tk.X, pady=(0, 5))
        
        # Butonlar
        buttons = [
            ("üìñ Kƒ±lavuz", self.show_guide),
            ("üìÅ Y√ºkle", self.load_json),
            ("üíæ Kaydet", self.save_json),
            ("üìä √ñrnek Veri", self.load_sample_data),
            ("üé® G√ñRSELLER OLU≈ûTUR", self.generate_all),
            ("üîÑ Yenile", self.refresh_preview),
            ("üóëÔ∏è Temizle", self.clear_all)
        ]
        
        for text, command in buttons:
            btn = ttk.Button(toolbar, text=text, command=command)
            btn.pack(side=tk.LEFT, padx=2)
            
            # Ana buton vurgulama
            if "G√ñRSELLER" in text:
                btn.configure(style='Success.TButton')
    
    def create_data_panel(self, parent):
        """Sol panel - Veri giri≈üi sekmeli yapƒ±"""
        # Notebook
        self.notebook = ttk.Notebook(parent)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Sekmeler
        self.tab_general = self.create_general_tab()
        self.tab_test = self.create_test_tab()
        self.tab_mitre = self.create_mitre_tab()
        self.tab_rules = self.create_rules_tab()
        self.tab_recommendations = self.create_recommendations_tab()
        self.tab_settings = self.create_settings_tab()
    
    def create_general_tab(self):
        """Genel bilgiler sekmesi"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="1. Genel Bilgiler")
        
        # Scrollable frame
        canvas = tk.Canvas(tab, bg='white')
        scrollbar = ttk.Scrollbar(tab, orient="vertical", command=canvas.yview)
        scrollable_frame = ttk.Frame(canvas)
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        # Form
        frame = ttk.LabelFrame(scrollable_frame, text="Rapor Bilgileri", padding=20)
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Bilgi
        info = ttk.Label(frame, text="‚ÑπÔ∏è T√ºrk√ße karakterler desteklenmektedir. T√ºm alanlarƒ± doldurun.",
                        foreground='blue', font=('Arial', 9))
        info.grid(row=0, column=0, columnspan=3, pady=(0, 10), sticky='w')
        
        # Form alanlarƒ±
        fields = [
            ("Kurum/≈ûirket Adƒ±:", "company_name", "√ñrn: Teknoloji A.≈û."),
            ("Rapor Tarihi:", "report_date", "√ñrn: Ocak 2025"),
            ("Hazƒ±rlayan:", "prepared_by", "√ñrn: G√ºvenlik Ekibi"),
            ("Rapor No:", "report_id", "√ñrn: IDCA-2025-001"),
            ("Ba≈ülƒ±k:", "report_title", "√ñrn: G√ºvenlik Deƒüerlendirmesi"),
            ("Gizlilik:", "classification", "√ñrn: Gizli")
        ]
        
        self.general_entries = {}
        for i, (label, key, hint) in enumerate(fields, 1):
            ttk.Label(frame, text=label, font=('Arial', 10)).grid(
                row=i, column=0, sticky='w', pady=5)
            
            entry = ttk.Entry(frame, width=35, font=('Arial', 10))
            entry.grid(row=i, column=1, pady=5, padx=10, sticky='ew')
            
            ttk.Label(frame, text=hint, foreground='gray',
                     font=('Arial', 8, 'italic')).grid(
                row=i, column=2, sticky='w', padx=5)
            
            self.general_entries[key] = entry
        
        frame.grid_columnconfigure(1, weight=1)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        return tab
    
    def create_test_tab(self):
        """Test sonu√ßlarƒ± sekmesi"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="2. Test Sonu√ßlarƒ±")
        
        # Ana frame
        main_frame = ttk.Frame(tab)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Bilgi
        info_frame = ttk.LabelFrame(main_frame, text="Bilgi", padding=10)
        info_frame.pack(fill=tk.X, pady=(0, 10))
        
        info_text = """‚Ä¢ Toplam Kural: Sistemdeki t√ºm kurallar
‚Ä¢ Test Edilen: Test s√ºrecine dahil edilenler
‚Ä¢ Tetiklenen: Ba≈üarƒ±yla alarm √ºretenler
‚Ä¢ Diƒüer deƒüerler otomatik hesaplanƒ±r"""
        
        ttk.Label(info_frame, text=info_text, font=('Arial', 9)).pack()
        
        # Veri giri≈üi
        entry_frame = ttk.LabelFrame(main_frame, text="Test Verileri", padding=15)
        entry_frame.pack(fill=tk.X, pady=(0, 10))
        
        fields = [
            ("Toplam Kural:", "total_rules"),
            ("Test Edilen:", "tested_rules"),
            ("Tetiklenen:", "triggered_rules")
        ]
        
        self.test_entries = {}
        for i, (label, key) in enumerate(fields):
            ttk.Label(entry_frame, text=label, font=('Arial', 10, 'bold')).grid(
                row=i, column=0, sticky='w', pady=8)
            
            entry = ttk.Entry(entry_frame, width=15, font=('Arial', 11))
            entry.grid(row=i, column=1, pady=8, padx=10)
            entry.bind('<KeyRelease>', self.calculate_stats)
            
            self.test_entries[key] = entry
        
        # Otomatik hesaplamalar
        calc_frame = ttk.LabelFrame(main_frame, text="Otomatik Hesaplamalar", padding=15)
        calc_frame.pack(fill=tk.X)
        
        self.calc_labels = {}
        calcs = [
            ("Test Edilmeyen:", "not_tested"),
            ("Ba≈üarƒ±sƒ±z:", "failed"),
            ("Ba≈üarƒ± Oranƒ±:", "success_rate"),
            ("Kapsama:", "coverage_rate")
        ]
        
        for i, (label, key) in enumerate(calcs):
            row = i // 2
            col = (i % 2) * 2
            
            ttk.Label(calc_frame, text=label, font=('Arial', 10)).grid(
                row=row, column=col, sticky='w', pady=5, padx=5)
            
            value_label = ttk.Label(calc_frame, text="0",
                                   font=('Arial', 12, 'bold'), foreground='blue')
            value_label.grid(row=row, column=col+1, pady=5, padx=10)
            
            self.calc_labels[key] = value_label
        
        return tab
    
    def create_mitre_tab(self):
        """MITRE ATT&CK sekmesi - TABLO Gƒ∞Rƒ∞≈ûƒ∞"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="3. MITRE ATT&CK")
        
        # Ana frame
        main_frame = ttk.Frame(tab)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Bilgi
        info = ttk.Label(main_frame, 
                        text="Her satƒ±ra bir taktik girin. Test ve tetiklenen sayƒ±larƒ±nƒ± yazƒ±n.",
                        font=('Arial', 9), foreground='blue')
        info.pack(pady=5)
        
        # Tablo frame
        table_frame = ttk.LabelFrame(main_frame, text="MITRE Taktikleri", padding=10)
        table_frame.pack(fill=tk.BOTH, expand=True)
        
        # Tablo widget
        columns = ['Taktik Adƒ±', 'Test Edilen', 'Tetiklenen', 'Ba≈üarƒ± %']
        self.mitre_table = TableEntry(table_frame, columns, rows=12)
        self.mitre_table.pack(fill=tk.BOTH, expand=True)
        
        # Varsayƒ±lan taktikler
        default_tactics = [
            ['Initial Access', '', '', ''],
            ['Execution', '', '', ''],
            ['Persistence', '', '', ''],
            ['Privilege Escalation', '', '', ''],
            ['Defense Evasion', '', '', ''],
            ['Credential Access', '', '', ''],
            ['Discovery', '', '', ''],
            ['Lateral Movement', '', '', ''],
            ['Collection', '', '', ''],
            ['Command and Control', '', '', ''],
            ['Exfiltration', '', '', ''],
            ['Impact', '', '', '']
        ]
        
        # Taktik isimlerini doldur
        for i, row in enumerate(default_tactics):
            if i < len(self.mitre_table.entries):
                self.mitre_table.entries[i][0].insert(0, row[0])
                self.mitre_table.entries[i][0].config(state='readonly')
        
        # Otomatik hesaplama i√ßin binding
        for row in self.mitre_table.entries:
            row[1].bind('<KeyRelease>', lambda e: self.calculate_mitre_rates())
            row[2].bind('<KeyRelease>', lambda e: self.calculate_mitre_rates())
        
        # Butonlar
        button_frame = ttk.Frame(main_frame)
        button_frame.pack(pady=10)
        
        ttk.Button(button_frame, text="Ba≈üarƒ± Oranlarƒ±nƒ± Hesapla",
                  command=self.calculate_mitre_rates).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="Tabloyu Temizle",
                  command=self.clear_mitre_table).pack(side=tk.LEFT, padx=5)
        
        return tab
    
    def create_rules_tab(self):
        """Kurallar sekmesi - TABLO Gƒ∞Rƒ∞≈ûƒ∞"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="4. Kurallar")
        
        # ƒ∞ki panel i√ßin notebook
        rules_notebook = ttk.Notebook(tab)
        rules_notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Tetiklenen kurallar
        triggered_tab = ttk.Frame(rules_notebook)
        rules_notebook.add(triggered_tab, text="‚úÖ Tetiklenen Kurallar")
        
        ttk.Label(triggered_tab, text="Ba≈üarƒ±yla tetiklenen kurallar (Table 3)",
                 font=('Arial', 9), foreground='green').pack(pady=5)
        
        # Tablo
        columns = ['Kural Adƒ±', 'MITRE ID', 'Taktik', 'G√ºven %']
        self.triggered_table = TableEntry(triggered_tab, columns, rows=15)
        self.triggered_table.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Algƒ±lanamayan teknikler
        undetected_tab = ttk.Frame(rules_notebook)
        rules_notebook.add(undetected_tab, text="‚ùå Algƒ±lanamayan")
        
        ttk.Label(undetected_tab, text="Tespit edilemeyen teknikler (Table 4)",
                 font=('Arial', 9), foreground='red').pack(pady=5)
        
        # Tablo
        columns = ['MITRE ID', 'Teknik Adƒ±', 'Taktik', 'Kritiklik']
        self.undetected_table = TableEntry(undetected_tab, columns, rows=15)
        self.undetected_table.pack(fill=tk.BOTH, expand=True, padx=10, pady=5)
        
        # Kritiklik i√ßin dropdown ekle
        for row in self.undetected_table.entries:
            # Kritiklik s√ºtununu combobox yap
            combo = ttk.Combobox(self.undetected_table, 
                                values=['Kritik', 'Y√ºksek', 'Orta', 'D√º≈ü√ºk'],
                                width=10, font=('Arial', 10))
            combo.grid(row=self.undetected_table.entries.index(row)+1, 
                      column=3, sticky='ew', padx=1, pady=1)
            row[3].destroy()
            row[3] = combo
        
        return tab
    
    def create_recommendations_tab(self):
        """√ñneriler sekmesi - TABLO Gƒ∞Rƒ∞≈ûƒ∞"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="5. √ñneriler")
        
        # Ana frame
        main_frame = ttk.Frame(tab)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        ttk.Label(main_frame, text="√ñneri listesi (Table 5)",
                 font=('Arial', 9), foreground='blue').pack(pady=5)
        
        # Tablo
        columns = ['√ñncelik', 'Kategori', '√ñneri Metni']
        self.recommendations_table = TableEntry(main_frame, columns, rows=10)
        self.recommendations_table.pack(fill=tk.BOTH, expand=True)
        
        # √ñncelik otomatik doldur
        for i, row in enumerate(self.recommendations_table.entries):
            row[0].insert(0, f"P{i+1}")
            row[0].config(state='readonly')
            
            # Kategori i√ßin dropdown
            combo = ttk.Combobox(self.recommendations_table,
                                values=['Log Kaynaklarƒ±', 'Kural Optimizasyonu', 
                                       'Yeni Kurallar', 'UEBA/SIEM', 'Test D√∂ng√ºs√º',
                                       'Eƒüitim', 'Otomasyon', 'Diƒüer'],
                                width=15, font=('Arial', 10))
            combo.grid(row=i+1, column=1, sticky='ew', padx=1, pady=1)
            row[1].destroy()
            row[1] = combo
        
        # Satƒ±r ekleme butonu
        ttk.Button(main_frame, text="‚ûï Yeni Satƒ±r Ekle",
                  command=self.add_recommendation_row).pack(pady=10)
        
        return tab
    
    def create_settings_tab(self):
        """Ayarlar sekmesi"""
        tab = ttk.Frame(self.notebook)
        self.notebook.add(tab, text="‚öôÔ∏è Ayarlar")
        
        # G√∂rsel ayarlarƒ±
        visual_frame = ttk.LabelFrame(tab, text="G√∂rsel Ayarlarƒ±", padding=15)
        visual_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Boyut ayarlarƒ±
        settings = [
            ("Figure Geni≈ülik (inch):", "fig_width", 12, 8, 20),
            ("Figure Y√ºkseklik (inch):", "fig_height", 8, 6, 15),
            ("DPI (√á√∂z√ºn√ºrl√ºk):", "fig_dpi", 300, 100, 600)
        ]
        
        self.visual_settings = {}
        for i, (label, key, default, min_val, max_val) in enumerate(settings):
            ttk.Label(visual_frame, text=label).grid(row=i, column=0, sticky='w', pady=5)
            
            spinbox = ttk.Spinbox(visual_frame, from_=min_val, to=max_val, width=10)
            spinbox.set(default)
            spinbox.grid(row=i, column=1, pady=5, padx=10)
            
            self.visual_settings[key] = spinbox
        
        # ≈ûeffaf arkaplan se√ßeneƒüi
        ttk.Checkbutton(visual_frame, text="≈ûeffaf Arkaplan (Word i√ßin √∂nerilen)",
                       variable=self.transparent_bg,
                       command=self.update_preview).grid(row=3, column=0, columnspan=2, pady=10)
        
        # Tema ayarlarƒ±
        theme_frame = ttk.LabelFrame(tab, text="Tema Se√ßimi", padding=15)
        theme_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Tema listesi
        ttk.Label(theme_frame, text="Hazƒ±r Temalar:").grid(row=0, column=0, sticky='w', pady=5)
        
        self.theme_combo = ttk.Combobox(theme_frame, values=list(self.themes.keys()), width=20)
        self.theme_combo.set(self.current_theme)
        self.theme_combo.grid(row=0, column=1, padx=10, pady=5)
        self.theme_combo.bind('<<ComboboxSelected>>', lambda e: self.apply_theme())
        
        ttk.Button(theme_frame, text="Temayƒ± Uygula", command=self.apply_theme).grid(row=0, column=2, padx=5)
        
        # Renk √∂nizleme
        color_preview_frame = ttk.LabelFrame(theme_frame, text="Tema Renkleri", padding=10)
        color_preview_frame.grid(row=1, column=0, columnspan=3, pady=10, sticky='ew')
        
        self.color_labels = {}
        color_items = [
            ('Primary', 'primary'), ('Secondary', 'secondary'), ('Accent', 'accent'),
            ('Success', 'success'), ('Warning', 'warning'), ('Danger', 'danger')
        ]
        
        for i, (name, key) in enumerate(color_items):
            row = i // 3
            col = (i % 3) * 2
            
            ttk.Label(color_preview_frame, text=f"{name}:").grid(row=row, column=col, sticky='w', padx=5, pady=3)
            
            color_label = tk.Label(color_preview_frame, text="   ", bg=self.colors[key], width=10)
            color_label.grid(row=row, column=col+1, padx=5, pady=3)
            self.color_labels[key] = color_label
        
        # Kayƒ±t ayarlarƒ±
        save_frame = ttk.LabelFrame(tab, text="Kayƒ±t Ayarlarƒ±", padding=15)
        save_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(save_frame, text="Kayƒ±t Klas√∂r√º:").grid(row=0, column=0, sticky='w')
        
        self.save_path = tk.StringVar(value=os.path.join(os.getcwd(), "IDCA_Gorseller"))
        entry = ttk.Entry(save_frame, textvariable=self.save_path, width=50)
        entry.grid(row=0, column=1, padx=10)
        
        ttk.Button(save_frame, text="üìÅ Se√ß",
                  command=self.select_folder).grid(row=0, column=2)
        
        return tab
    
    def apply_theme(self):
        """Se√ßili temayƒ± uygula"""
        selected_theme = self.theme_combo.get()
        if selected_theme in self.themes:
            self.current_theme = selected_theme
            self.colors = self.themes[selected_theme].copy()
            
            # Renk √∂nizlemelerini g√ºncelle
            for key, label in self.color_labels.items():
                if key in self.colors:
                    label.config(bg=self.colors[key])
            
            # √ñnizlemeyi g√ºncelle
            self.update_preview()
            
            self.status_label.config(text=f"‚úÖ {selected_theme} temasƒ± uygulandƒ±", foreground='green')
    
    def create_preview_panel(self, parent):
        """Saƒü panel - √ñnizleme"""
        # Ba≈ülƒ±k
        header = ttk.Frame(parent)
        header.pack(fill=tk.X, padx=5, pady=5)
        
        ttk.Label(header, text="√ñnizleme", font=('Arial', 12, 'bold')).pack(side=tk.LEFT)
        
        # G√∂rsel se√ßimi
        self.preview_combo = ttk.Combobox(header, values=[
            'Figure 1 - Test Uygunluk',
            'Figure 2 - Test Durumu',
            'Table 1 - Sonu√ß',
            'Table 2 - MITRE',
            'Table 3 - Tetiklenen',
            'Table 4 - Algƒ±lanamayan',
            'Table 5 - √ñneriler'
        ], width=20)
        self.preview_combo.pack(side=tk.LEFT, padx=10)
        self.preview_combo.current(0)
        self.preview_combo.bind('<<ComboboxSelected>>', lambda e: self.update_preview())
        
        ttk.Button(header, text="üîÑ", command=self.update_preview, width=3).pack(side=tk.LEFT)
        
        # √ñnizleme alanƒ±
        self.preview_frame = ttk.LabelFrame(parent, text="", padding=5)
        self.preview_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def create_status_bar(self, parent):
        """Durum √ßubuƒüu"""
        status_frame = ttk.Frame(parent)
        status_frame.pack(fill=tk.X, side=tk.BOTTOM, pady=(5, 0))
        
        self.status_label = ttk.Label(status_frame, text="Hazƒ±r", font=('Arial', 9))
        self.status_label.pack(side=tk.LEFT, padx=10)
        
        self.data_status = ttk.Label(status_frame, text="", font=('Arial', 9))
        self.data_status.pack(side=tk.RIGHT, padx=10)
    
    def calculate_stats(self, event=None):
        """Test istatistiklerini hesapla"""
        try:
            total = int(self.test_entries['total_rules'].get() or 0)
            tested = int(self.test_entries['tested_rules'].get() or 0)
            triggered = int(self.test_entries['triggered_rules'].get() or 0)
            
            # Validasyon
            if tested > total:
                self.status_label.config(text="‚ö†Ô∏è Test edilen > Toplam olamaz!", foreground='red')
                return
            if triggered > tested:
                self.status_label.config(text="‚ö†Ô∏è Tetiklenen > Test edilen olamaz!", foreground='red')
                return
            
            # Hesaplamalar
            not_tested = total - tested
            failed = tested - triggered
            success_rate = (triggered / tested * 100) if tested > 0 else 0
            coverage_rate = (tested / total * 100) if total > 0 else 0
            
            # G√ºncelle
            self.calc_labels['not_tested'].config(text=str(not_tested))
            self.calc_labels['failed'].config(text=str(failed))
            self.calc_labels['success_rate'].config(text=f"%{success_rate:.1f}")
            self.calc_labels['coverage_rate'].config(text=f"%{coverage_rate:.1f}")
            
            # Renk
            color = 'green' if success_rate >= 70 else 'orange' if success_rate >= 50 else 'red'
            self.calc_labels['success_rate'].config(foreground=color)
            
            self.status_label.config(text="‚úÖ Hesaplandƒ±", foreground='green')
            
        except ValueError:
            pass
    
    def calculate_mitre_rates(self):
        """MITRE ba≈üarƒ± oranlarƒ±nƒ± hesapla"""
        for row in self.mitre_table.entries:
            try:
                test = int(row[1].get() or 0)
                triggered = int(row[2].get() or 0)
                
                if test > 0:
                    rate = (triggered / test) * 100
                    row[3].delete(0, tk.END)
                    row[3].insert(0, f"{rate:.1f}")
                    
                    # Renk kodlamasƒ±
                    if rate >= 70:
                        row[3].config(foreground='green')
                    elif rate >= 40:
                        row[3].config(foreground='orange')
                    else:
                        row[3].config(foreground='red')
            except:
                pass
        
        self.status_label.config(text="‚úÖ MITRE oranlarƒ± hesaplandƒ±", foreground='green')
    
    def clear_mitre_table(self):
        """MITRE tablosunu temizle (sadece sayƒ±larƒ±)"""
        for row in self.mitre_table.entries:
            row[1].delete(0, tk.END)
            row[2].delete(0, tk.END)
            row[3].delete(0, tk.END)
    
    def add_recommendation_row(self):
        """√ñneri tablosuna yeni satƒ±r ekle"""
        self.recommendations_table.add_row()
        # Yeni satƒ±rƒ± ayarla
        new_row = self.recommendations_table.entries[-1]
        new_row[0].insert(0, f"P{len(self.recommendations_table.entries)}")
        new_row[0].config(state='readonly')
    
    def show_welcome(self):
        """Ho≈ü geldiniz mesajƒ±"""
        welcome_text = f"""
IDCA Rapor G√∂rselle≈ütirici v5.0 FINAL

‚úÖ T√ºrk√ße karakter tam desteƒüi
‚úÖ Tablo ≈üeklinde kolay veri giri≈üi
‚úÖ 5 farklƒ± hazƒ±r tema se√ßeneƒüi
‚úÖ ≈ûeffaf arkaplan desteƒüi (Word i√ßin ideal)
‚úÖ Tema deƒüi≈üiklikleri √∂nizlemede anƒ±nda g√∂r√ºn√ºr
‚úÖ T√ºm g√∂rseller se√ßili tema ile olu≈üturulur

Aktif Tema: {self.current_theme}
Arkaplan: {'≈ûeffaf' if self.transparent_bg.get() else 'Renkli'}

Ba≈ülamak i√ßin:
1. Sekmelerde verileri girin
2. Ayarlar sekmesinden tema se√ßin
3. 'G√ñRSELLER OLU≈ûTUR' butonuna tƒ±klayƒ±n
        """
        self.status_label.config(text="Ho≈ü geldiniz! Kƒ±lavuz i√ßin 'üìñ Kƒ±lavuz' butonuna tƒ±klayƒ±n.")
    
    def show_guide(self):
        """Kullanƒ±m kƒ±lavuzu"""
        guide_window = tk.Toplevel(self.root)
        guide_window.title("üìñ Kullanƒ±m Kƒ±lavuzu")
        guide_window.geometry("800x600")
        
        text = scrolledtext.ScrolledText(guide_window, wrap=tk.WORD, font=('Arial', 10))
        text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        guide_text = """
IDCA RAPOR G√ñRSELLE≈ûTƒ∞Rƒ∞Cƒ∞ KULLANIM KILAVUZU
==============================================

üéØ AMA√á
Bu ara√ß, IDCA test sonu√ßlarƒ±nƒ±zƒ± Word raporlarƒ± i√ßin profesyonel g√∂rsellere d√∂n√º≈üt√ºr√ºr.

üìä √úRETILEN G√ñRSELLER
‚Ä¢ Figure 1: Test Uygunluk Grafiƒüi
‚Ä¢ Figure 2: Test Durumu Grafikleri
‚Ä¢ Table 1: Sonu√ß Deƒüerlendirme
‚Ä¢ Table 2: MITRE ATT&CK Kapsama
‚Ä¢ Table 3: Tetiklenen Kurallar
‚Ä¢ Table 4: Algƒ±lanamayan Teknikler
‚Ä¢ Table 5: √ñneriler

üìù VERƒ∞ Gƒ∞Rƒ∞≈ûƒ∞

1. GENEL Bƒ∞LGƒ∞LER
   - Kurum adƒ±, tarih, hazƒ±rlayan bilgileri
   - T√ºrk√ße karakterler desteklenir (√ß, ƒü, ƒ±, √∂, ≈ü, √º)

2. TEST SONU√áLARI
   - Toplam, test edilen, tetiklenen sayƒ±larƒ±
   - Diƒüer deƒüerler otomatik hesaplanƒ±r

3. MITRE ATT&CK (TABLO Gƒ∞Rƒ∞≈ûƒ∞)
   - Her satƒ±ra test ve tetiklenen sayƒ±larƒ± girin
   - Ba≈üarƒ± oranlarƒ± otomatik hesaplanƒ±r
   - Taktik isimleri sabittir

4. KURALLAR (TABLO Gƒ∞Rƒ∞≈ûƒ∞)
   - Tetiklenen kurallarƒ± tabloya girin
   - Algƒ±lanamayan teknikleri ayrƒ± tabloya girin
   - Kritiklik seviyeleri dropdown men√ºden se√ßilir

5. √ñNERƒ∞LER (TABLO Gƒ∞Rƒ∞≈ûƒ∞)
   - √ñncelikler otomatik numaralanƒ±r
   - Kategoriler dropdown men√ºden se√ßilir
   - √ñneri metinlerini yazƒ±n

üí° ƒ∞PU√áLARI

‚Ä¢ TABLO Gƒ∞Rƒ∞≈ûƒ∞: Tab tu≈üu ile h√ºcreler arasƒ± ge√ßi≈ü yapƒ±n
‚Ä¢ EXCEL'DEN KOPYALAMA: Verileri Excel'den kopyalayƒ±p yapƒ±≈ütƒ±rabilirsiniz
‚Ä¢ T√úRK√áE KARAKTER: T√ºm alanlarda T√ºrk√ße karakterler kullanƒ±labilir
‚Ä¢ KAYDETME: JSON formatƒ±nda kayƒ±t yaparak daha sonra devam edebilirsiniz

üìÅ G√ñRSEL OLU≈ûTURMA

1. T√ºm verileri girin
2. "G√ñRSELLER OLU≈ûTUR" butonuna tƒ±klayƒ±n
3. G√∂rseller belirlenen klas√∂re kaydedilir
4. Her g√∂rsel ayrƒ± PNG dosyasƒ± olarak olu≈üturulur

üìã WORD'E EKLEME

1. PNG dosyalarƒ±nƒ± Word'e ekleyin
2. "Metinle Satƒ±r ƒ∞√ßi" se√ßeneƒüini kullanƒ±n
3. Sƒ±kƒ±≈ütƒ±rmayƒ± kapatƒ±n (300 DPI kalite)

‚ö†Ô∏è Dƒ∞KKAT EDƒ∞LECEKLER

‚Ä¢ Sayƒ±sal alanlara sadece rakam girin
‚Ä¢ Test edilen ‚â§ Toplam kural
‚Ä¢ Tetiklenen ‚â§ Test edilen
‚Ä¢ G√ºven skorlarƒ± 0-100 arasƒ±

Ba≈üarƒ±lƒ± raporlamalar! üöÄ
"""
        
        text.insert(tk.END, guide_text)
        text.config(state=tk.DISABLED)
        
        ttk.Button(guide_window, text="Kapat", 
                  command=guide_window.destroy).pack(pady=10)
    
    def collect_data(self):
        """T√ºm verileri topla"""
        # Genel bilgiler
        for key, entry in self.general_entries.items():
            self.data['general'][key] = entry.get()
        
        # Test sonu√ßlarƒ±
        for key, entry in self.test_entries.items():
            try:
                self.data['test_results'][key] = int(entry.get() or 0)
            except:
                self.data['test_results'][key] = 0
        
        # Hesaplanmƒ±≈ü deƒüerler
        total = self.data['test_results'].get('total_rules', 0)
        tested = self.data['test_results'].get('tested_rules', 0)
        triggered = self.data['test_results'].get('triggered_rules', 0)
        
        self.data['test_results']['not_tested'] = total - tested
        self.data['test_results']['failed'] = tested - triggered
        self.data['test_results']['success_rate'] = (triggered/tested*100) if tested > 0 else 0
        
        # MITRE taktikleri - TABLODAN
        self.data['mitre_tactics'] = {}
        for row in self.mitre_table.get_data():
            if len(row) >= 4 and row[0]:
                try:
                    test = int(row[1] or 0)
                    trig = int(row[2] or 0)
                    self.data['mitre_tactics'][row[0]] = {
                        'test': test,
                        'triggered': trig,
                        'rate': float(row[3] or 0)
                    }
                except:
                    pass
        
        # Tetiklenen kurallar - TABLODAN
        self.data['triggered_rules'] = []
        for row in self.triggered_table.get_data():
            if len(row) >= 4 and row[0]:
                self.data['triggered_rules'].append({
                    'name': row[0],
                    'mitre': row[1],
                    'tactic': row[2],
                    'confidence': row[3].replace('%', '')
                })
        
        # Algƒ±lanamayan teknikler - TABLODAN
        self.data['undetected_techniques'] = []
        for row in self.undetected_table.get_data():
            if len(row) >= 4 and row[0]:
                self.data['undetected_techniques'].append({
                    'id': row[0],
                    'name': row[1],
                    'tactic': row[2],
                    'criticality': row[3]
                })
        
        # √ñneriler - TABLODAN
        self.data['recommendations'] = []
        for row in self.recommendations_table.get_data():
            if len(row) >= 3 and row[2]:
                self.data['recommendations'].append({
                    'priority': row[0],
                    'category': row[1],
                    'text': row[2]
                })
    
    def save_json(self):
        """Verileri JSON olarak kaydet"""
        self.collect_data()
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON dosyalarƒ±", "*.json")],
            initialfile=f"IDCA_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(self.data, f, ensure_ascii=False, indent=2)
                
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "Veriler kaydedildi!")
                self.status_label.config(text="‚úÖ Kaydedildi", foreground='green')
            except Exception as e:
                messagebox.showerror("Hata", f"Kayƒ±t hatasƒ±: {str(e)}")
    
    def load_json(self):
        """JSON dosyasƒ±ndan veri y√ºkle"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON dosyalarƒ±", "*.json")]
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
                
                self.populate_forms()
                messagebox.showinfo("Ba≈üarƒ±lƒ±", "Veriler y√ºklendi!")
                self.status_label.config(text="‚úÖ Y√ºklendi", foreground='green')
            except Exception as e:
                messagebox.showerror("Hata", f"Y√ºkleme hatasƒ±: {str(e)}")
    
    def populate_forms(self):
        """Y√ºklenen veriyi formlara doldur"""
        # Genel bilgiler
        for key, value in self.data.get('general', {}).items():
            if key in self.general_entries:
                self.general_entries[key].delete(0, tk.END)
                self.general_entries[key].insert(0, value)
        
        # Test sonu√ßlarƒ±
        for key, value in self.data.get('test_results', {}).items():
            if key in self.test_entries:
                self.test_entries[key].delete(0, tk.END)
                self.test_entries[key].insert(0, str(value))
        
        self.calculate_stats()
        
        # MITRE taktikleri - TABLOYA
        mitre_data = []
        for tactic in ['Initial Access', 'Execution', 'Persistence', 'Privilege Escalation',
                      'Defense Evasion', 'Credential Access', 'Discovery', 'Lateral Movement',
                      'Collection', 'Command and Control', 'Exfiltration', 'Impact']:
            if tactic in self.data.get('mitre_tactics', {}):
                values = self.data['mitre_tactics'][tactic]
                mitre_data.append([tactic, str(values['test']), str(values['triggered']), f"{values['rate']:.1f}"])
            else:
                mitre_data.append([tactic, '', '', ''])
        
        self.mitre_table.set_data(mitre_data)
        
        # Diƒüer tablolar
        triggered_data = [[r['name'], r['mitre'], r['tactic'], r['confidence']] 
                         for r in self.data.get('triggered_rules', [])]
        self.triggered_table.set_data(triggered_data)
        
        undetected_data = [[t['id'], t['name'], t['tactic'], t['criticality']]
                          for t in self.data.get('undetected_techniques', [])]
        self.undetected_table.set_data(undetected_data)
        
        rec_data = [[r['priority'], r['category'], r['text']]
                   for r in self.data.get('recommendations', [])]
        self.recommendations_table.set_data(rec_data)
    
    def load_sample_data(self):
        """√ñrnek veri y√ºkle"""
        sample = {
            'general': {
                'company_name': '√ñrnek ≈ûirket A.≈û.',
                'report_date': 'Ocak 2025',
                'prepared_by': 'G√ºvenlik Ekibi',
                'report_id': 'IDCA-2025-001',
                'report_title': 'G√ºvenlik Deƒüerlendirme Raporu',
                'classification': 'Gizli'
            },
            'test_results': {
                'total_rules': 291,
                'tested_rules': 114,
                'triggered_rules': 65
            },
            'mitre_tactics': {
                'Initial Access': {'test': 8, 'triggered': 3, 'rate': 37.5},
                'Execution': {'test': 12, 'triggered': 5, 'rate': 41.7},
                'Persistence': {'test': 16, 'triggered': 8, 'rate': 50.0},
                'Privilege Escalation': {'test': 10, 'triggered': 3, 'rate': 30.0}
            },
            'triggered_rules': [
                {'name': '≈û√ºpheli PowerShell Komutu', 'mitre': 'T1059.001', 
                 'tactic': 'Execution', 'confidence': '95'},
                {'name': 'Brute Force Saldƒ±rƒ±sƒ±', 'mitre': 'T1110', 
                 'tactic': 'Credential Access', 'confidence': '88'}
            ],
            'undetected_techniques': [
                {'id': 'T1566.001', 'name': 'Phishing Ekleri', 
                 'tactic': 'Initial Access', 'criticality': 'Kritik'},
                {'id': 'T1548.002', 'name': 'UAC Bypass', 
                 'tactic': 'Privilege Escalation', 'criticality': 'Y√ºksek'}
            ],
            'recommendations': [
                {'priority': 'P1', 'category': 'Log Kaynaklarƒ±', 
                 'text': 'Windows Security loglarƒ±nƒ±n tam entegrasyonu saƒülanmalƒ±'},
                {'priority': 'P2', 'category': 'Kural Optimizasyonu',
                 'text': 'Ba≈üarƒ±sƒ±z kurallarƒ±n e≈üik deƒüerleri g√ºncellenmeli'}
            ]
        }
        
        self.data = sample
        self.populate_forms()
        
        messagebox.showinfo("Ba≈üarƒ±lƒ±", "√ñrnek veriler y√ºklendi!")
        self.status_label.config(text="‚úÖ √ñrnek veri y√ºklendi", foreground='green')
    
    def clear_all(self):
        """T√ºm verileri temizle"""
        if messagebox.askyesno("Onay", "T√ºm veriler silinecek. Emin misiniz?"):
            # Formlarƒ± temizle
            for entry in self.general_entries.values():
                entry.delete(0, tk.END)
            
            for entry in self.test_entries.values():
                entry.delete(0, tk.END)
            
            for label in self.calc_labels.values():
                label.config(text="0")
            
            # Tablolarƒ± temizle
            self.clear_mitre_table()
            self.triggered_table.clear()
            self.undetected_table.clear()
            self.recommendations_table.clear()
            
            self.init_data()
            
            self.status_label.config(text="‚úÖ Temizlendi", foreground='orange')
    
    def select_folder(self):
        """Kayƒ±t klas√∂r√º se√ß"""
        folder = filedialog.askdirectory()
        if folder:
            self.save_path.set(folder)
    
    def update_preview(self):
        """√ñnizlemeyi g√ºncelle - TEMA DESTEKLƒ∞"""
        # √ñnizleme alanƒ±nƒ± temizle
        for widget in self.preview_frame.winfo_children():
            widget.destroy()
        
        try:
            self.collect_data()
            
            # Figure olu≈ütur
            fig = plt.figure(figsize=(5, 4), dpi=80)
            
            # ≈ûeffaf arkaplan kontrol√º
            if self.transparent_bg.get():
                fig.patch.set_facecolor('none')
                fig.patch.set_alpha(0)
            else:
                fig.patch.set_facecolor(self.colors['dark'])
            
            selected = self.preview_combo.get()
            
            if 'Figure 1' in selected:
                self.preview_figure1(fig)
            elif 'Figure 2' in selected:
                self.preview_figure2(fig)
            else:
                self.preview_table(fig, selected)
            
            # Canvas'a ekle
            canvas = FigureCanvasTkAgg(fig, master=self.preview_frame)
            canvas.draw()
            canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)
            
        except Exception as e:
            error_label = ttk.Label(self.preview_frame,
                                   text=f"√ñnizleme hatasƒ±:\n{str(e)}",
                                   font=('Arial', 10))
            error_label.pack(expand=True)
    
    def preview_figure1(self, fig):
        """Figure 1 √∂nizleme - TEMA DESTEKLƒ∞"""
        ax = fig.add_subplot(111)
        
        # ≈ûeffaf arkaplan kontrol√º
        if self.transparent_bg.get():
            ax.set_facecolor('none')
            ax.patch.set_alpha(0)
        else:
            ax.set_facecolor(self.colors['primary'])
        
        total = self.data['test_results'].get('total_rules', 100)
        tested = self.data['test_results'].get('tested_rules', 50)
        not_tested = total - tested if total > tested else 0
        
        sizes = [tested, not_tested]
        labels = ['Test\nEdilmi≈ü', 'Test\nEdilmemi≈ü']
        colors = [self.colors['accent_secondary'], self.colors['gray']]
        
        wedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, 
                                          autopct='%1.1f%%', startangle=90,
                                          textprops={'color': self.colors['light']})
        
        # Merkez daire
        centre_circle = plt.Circle((0, 0), 0.70, 
                                  fc='none' if self.transparent_bg.get() else self.colors['primary'],
                                  linewidth=2, edgecolor=self.colors['accent'])
        ax.add_artist(centre_circle)
        
        ax.set_title('Test Uygunluk', fontsize=11, color=self.colors['light'], pad=10)
    
    def preview_figure2(self, fig):
        """Figure 2 √∂nizleme - TEMA DESTEKLƒ∞"""
        ax = fig.add_subplot(111)
        
        # ≈ûeffaf arkaplan kontrol√º
        if self.transparent_bg.get():
            ax.set_facecolor('none')
            ax.patch.set_alpha(0)
        else:
            ax.set_facecolor(self.colors['primary'])
        
        triggered = self.data['test_results'].get('triggered_rules', 30)
        failed = self.data['test_results'].get('failed', 20)
        
        bars = ax.bar(['Tetiklenen', 'Ba≈üarƒ±sƒ±z'], [triggered, failed],
                     color=[self.colors['success'], self.colors['danger']],
                     edgecolor=self.colors['accent'], linewidth=2)
        
        ax.set_title('Test Durumu', fontsize=11, color=self.colors['light'])
        ax.tick_params(colors=self.colors['gray'])
        ax.set_ylabel('Sayƒ±', color=self.colors['light'])
        
        # Grid
        ax.grid(True, alpha=0.3, color=self.colors['gray'])
    
    def preview_table(self, fig, selected):
        """Tablo √∂nizleme - TEMA DESTEKLƒ∞"""
        ax = fig.add_subplot(111)
        ax.axis('tight')
        ax.axis('off')
        
        # ≈ûeffaf arkaplan
        if self.transparent_bg.get():
            ax.set_facecolor('none')
        
        # √ñrnek tablo
        table_data = [['Ba≈ülƒ±k 1', 'Ba≈ülƒ±k 2', 'Ba≈ülƒ±k 3'],
                     ['Veri 1', 'Veri 2', 'Veri 3'],
                     ['Veri 4', 'Veri 5', 'Veri 6']]
        
        # Renk ≈üemasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 3)  # Ba≈ülƒ±k
        cell_colors.append([self.colors['secondary']] * 3)
        cell_colors.append([self.colors['secondary']] * 3)
        
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors)
        table.auto_set_font_size(False)
        table.set_fontsize(10)
        table.scale(1.2, 1.5)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(3):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title(selected, fontsize=11, color=self.colors['light'])
    
    def refresh_preview(self):
        """√ñnizlemeyi yenile - Tema deƒüi≈üikliklerini uygula"""
        self.update_preview()
        self.status_label.config(text="‚úÖ √ñnizleme yenilendi", foreground='green')
    
    def generate_all(self):
        """T√ºm g√∂rselleri olu≈ütur - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        self.collect_data()
        
        # Validasyon
        if not self.data['general'].get('company_name'):
            messagebox.showwarning("Uyarƒ±", "L√ºtfen en azƒ±ndan kurum adƒ±nƒ± girin!")
            return
        
        if not self.data['test_results'].get('total_rules'):
            messagebox.showwarning("Uyarƒ±", "L√ºtfen test sonu√ßlarƒ±nƒ± girin!")
            return
        
        # Kayƒ±t klas√∂r√º
        save_dir = self.save_path.get()
        if not os.path.exists(save_dir):
            os.makedirs(save_dir)
        
        # Progress penceresi
        progress = tk.Toplevel(self.root)
        progress.title("G√∂rseller Olu≈üturuluyor")
        progress.geometry("500x250")
        progress.transient(self.root)
        
        # Tema ve arkaplan bilgisi
        theme_info = ttk.Label(progress, 
                              text=f"Tema: {self.current_theme} | Arkaplan: {'≈ûeffaf' if self.transparent_bg.get() else 'Renkli'}",
                              font=('Arial', 10, 'italic'), foreground='blue')
        theme_info.pack(pady=10)
        
        label = ttk.Label(progress, text="Ba≈ülƒ±yor...", font=('Arial', 12))
        label.pack(pady=10)
        
        pbar = ttk.Progressbar(progress, length=400, mode='determinate')
        pbar.pack(pady=20)
        
        details = ttk.Label(progress, text="", font=('Arial', 9), foreground='gray')
        details.pack(pady=5)
        
        # G√∂rseller
        visuals = [
            ('Figure_1_Test_Uygunluk', self.generate_figure1),
            ('Figure_2_Test_Durumu', self.generate_figure2),
            ('Table_1_Sonuc_Degerlendirme', self.generate_table1),
            ('Table_2_MITRE_Kapsama', self.generate_table2),
            ('Table_3_Tetiklenen_Kurallar', self.generate_table3),
            ('Table_4_Algilanamayan_Teknikler', self.generate_table4),
            ('Table_5_Oneriler', self.generate_table5)
        ]
        
        pbar['maximum'] = len(visuals)
        success = 0
        
        for i, (name, func) in enumerate(visuals):
            label.config(text=f"Olu≈üturuluyor: {name}")
            details.config(text=f"({i+1}/{len(visuals)}) {name}.png")
            pbar['value'] = i
            progress.update()
            
            try:
                filepath = os.path.join(save_dir, f"{name}.png")
                func(filepath)
                success += 1
            except Exception as e:
                print(f"Hata {name}: {e}")
        
        pbar['value'] = len(visuals)
        label.config(text=f"‚úÖ Tamamlandƒ±! {success}/{len(visuals)} g√∂rsel olu≈üturuldu")
        details.config(text=f"Kayƒ±t yeri: {save_dir}")
        
        # Arkaplan bilgisi
        if self.transparent_bg.get():
            info_label = ttk.Label(progress, 
                                  text="‚ÑπÔ∏è G√∂rseller ≈üeffaf arkaplanla kaydedildi (Word i√ßin ideal)",
                                  font=('Arial', 9), foreground='green')
            info_label.pack(pady=5)
        
        ttk.Button(progress, text="Klas√∂r√º A√ß", 
                  command=lambda: self.open_folder(save_dir)).pack(side=tk.LEFT, padx=50, pady=10)
        ttk.Button(progress, text="Kapat", 
                  command=progress.destroy).pack(side=tk.RIGHT, padx=50, pady=10)
    
    def open_folder(self, folder_path):
        """Klas√∂r√º a√ß"""
        if sys.platform.startswith('win'):
            os.startfile(folder_path)
        elif sys.platform.startswith('darwin'):
            os.system(f'open "{folder_path}"')
        else:
            os.system(f'xdg-open "{folder_path}"')
    
    def generate_figure1(self, filepath):
        """Figure 1 olu≈ütur - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        width = float(self.visual_settings['fig_width'].get())
        height = float(self.visual_settings['fig_height'].get())
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        
        # ≈ûeffaf arkaplan ayarƒ±
        if self.transparent_bg.get():
            fig.patch.set_facecolor('none')
            fig.patch.set_alpha(0)
            ax.set_facecolor('none')
            ax.patch.set_alpha(0)
        else:
            fig.patch.set_facecolor(self.colors['dark'])
            ax.set_facecolor(self.colors['primary'])
        
        # Veriler
        total = self.data['test_results']['total_rules']
        tested = self.data['test_results']['tested_rules']
        not_tested = self.data['test_results']['not_tested']
        triggered = self.data['test_results']['triggered_rules']
        success_rate = self.data['test_results']['success_rate']
        
        # Pasta grafik
        sizes = [tested, not_tested]
        labels = [f'Test Edilmi≈ü\n{tested} kural\n(%{tested/total*100:.1f})',
                 f'Test Edilmemi≈ü\n{not_tested} kural\n(%{not_tested/total*100:.1f})']
        colors = [self.colors['accent_secondary'], self.colors['gray']]
        
        wedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors,
                                          explode=(0.05, 0), startangle=90, shadow=not self.transparent_bg.get(),
                                          textprops={'fontsize': 11, 'color': self.colors['light']})
        
        # Merkez daire
        centre_circle = plt.Circle((0, 0), 0.70, 
                                  fc='none' if self.transparent_bg.get() else self.colors['primary'],
                                  linewidth=2, edgecolor=self.colors['accent'])
        ax.add_artist(centre_circle)
        
        # Merkez metin
        ax.text(0, 0.1, str(total), ha='center', va='center',
               fontsize=36, fontweight='bold', color=self.colors['accent'])
        ax.text(0, -0.15, 'Toplam Kural', ha='center', va='center',
               fontsize=12, color=self.colors['gray'])
        ax.text(0, -0.3, f'Ba≈üarƒ±: %{success_rate:.1f}', ha='center', va='center',
               fontsize=11, fontweight='bold',
               color=self.colors['success'] if success_rate >= 70 else self.colors['warning'])
        
        # Ba≈ülƒ±k
        ax.set_title('Figure 1: Analiz Edilen Korelasyonlarƒ±n Test Uygunluk Grafiƒüi',
                    fontsize=14, fontweight='bold', color=self.colors['light'], pad=20)
        
        # Alt bilgi
        fig.text(0.5, 0.02, f"{self.data['general']['company_name']} - {self.data['general']['report_date']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        
        # Kaydet
        if self.transparent_bg.get():
            plt.savefig(filepath, dpi=dpi, transparent=True, bbox_inches='tight')
        else:
            plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_figure2(self, filepath):
        """Figure 2 olu≈ütur - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        width = float(self.visual_settings['fig_width'].get())
        height = float(self.visual_settings['fig_height'].get())
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig = plt.figure(figsize=(width, height), dpi=100)
        
        # ≈ûeffaf arkaplan ayarƒ±
        if self.transparent_bg.get():
            fig.patch.set_facecolor('none')
            fig.patch.set_alpha(0)
        else:
            fig.patch.set_facecolor(self.colors['dark'])
        
        # Sol grafik
        ax1 = plt.subplot(1, 2, 1)
        if self.transparent_bg.get():
            ax1.set_facecolor('none')
            ax1.patch.set_alpha(0)
        else:
            ax1.set_facecolor(self.colors['primary'])
        
        triggered = self.data['test_results']['triggered_rules']
        failed = self.data['test_results']['failed']
        
        bars = ax1.bar(['Tetiklenen', 'Ba≈üarƒ±sƒ±z'], [triggered, failed],
                      color=[self.colors['success'], self.colors['danger']],
                      edgecolor=self.colors['accent'], linewidth=2)
        
        for bar, val in zip(bars, [triggered, failed]):
            ax1.text(bar.get_x() + bar.get_width()/2, bar.get_height() + max([triggered, failed])*0.02,
                    str(val), ha='center', fontweight='bold', color=self.colors['light'])
        
        ax1.set_title('Test Sonu√ß Daƒüƒ±lƒ±mƒ±', fontsize=12, color=self.colors['light'])
        ax1.set_ylabel('Kural Sayƒ±sƒ±', color=self.colors['light'])
        ax1.tick_params(colors=self.colors['gray'])
        ax1.grid(True, alpha=0.3, color=self.colors['gray'], linestyle='--')
        
        # Saƒü grafik - MITRE
        ax2 = plt.subplot(1, 2, 2)
        if self.transparent_bg.get():
            ax2.set_facecolor('none')
            ax2.patch.set_alpha(0)
        else:
            ax2.set_facecolor(self.colors['primary'])
        
        if self.data['mitre_tactics']:
            tactics_sorted = sorted(self.data['mitre_tactics'].items(),
                                  key=lambda x: x[1]['rate'])[:6]
            
            tactics = [t[0] for t in tactics_sorted]
            rates = [t[1]['rate'] for t in tactics_sorted]
            
            colors_bar = []
            for r in rates:
                if r < 40:
                    colors_bar.append(self.colors['danger'])
                elif r < 60:
                    colors_bar.append(self.colors['warning'])
                else:
                    colors_bar.append(self.colors['success'])
            
            bars2 = ax2.barh(range(len(tactics)), rates, color=colors_bar,
                           edgecolor=self.colors['accent'], linewidth=1)
            
            for bar, val in zip(bars2, rates):
                ax2.text(val + 1, bar.get_y() + bar.get_height()/2,
                        f'%{val:.1f}', va='center', fontweight='bold', color=self.colors['light'])
            
            ax2.set_yticks(range(len(tactics)))
            ax2.set_yticklabels(tactics, fontsize=9, color=self.colors['light'])
            ax2.set_xlim(0, 100)
            ax2.set_xlabel('Ba≈üarƒ± Oranƒ± (%)', color=self.colors['light'])
            ax2.set_title('En D√º≈ü√ºk Performanslƒ± Taktikler', fontsize=12, color=self.colors['light'])
            ax2.tick_params(colors=self.colors['gray'])
            ax2.grid(True, axis='x', alpha=0.3, color=self.colors['gray'], linestyle='--')
        
        fig.suptitle('Figure 2: Test Edilen Korelasyonlarƒ±n Durumu',
                    fontsize=14, fontweight='bold', color=self.colors['light'])
        
        fig.text(0.5, 0.02, f"{self.data['general']['company_name']} - {self.data['general']['prepared_by']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        
        # Kaydet
        if self.transparent_bg.get():
            plt.savefig(filepath, dpi=dpi, transparent=True, bbox_inches='tight')
        else:
            plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table1(self, filepath):
        """Table 1 olu≈ütur - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        width = float(self.visual_settings['fig_width'].get())
        height = 6
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        
        # ≈ûeffaf arkaplan
        if self.transparent_bg.get():
            fig.patch.set_facecolor('none')
            fig.patch.set_alpha(0)
            ax.set_facecolor('none')
        else:
            fig.patch.set_facecolor(self.colors['dark'])
        
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        total = self.data['test_results']['total_rules']
        tested = self.data['test_results']['tested_rules']
        success_rate = self.data['test_results']['success_rate']
        not_tested = self.data['test_results']['not_tested']
        
        table_data = [
            ['Metrik', 'Deƒüer', 'Hedef', 'Durum', 'A√ßƒ±klama'],
            ['Toplam Kural', str(total), '300+', 
             '‚úÖ' if total >= 300 else '‚ö†Ô∏è' if total >= 200 else '‚ùå', 
             'Kapsam deƒüerlendirmesi'],
            ['Test Edilen', str(tested), '200+',
             '‚úÖ' if tested >= 200 else '‚ö†Ô∏è' if tested >= 100 else '‚ùå',
             'Test kapsamƒ±'],
            ['Ba≈üarƒ± Oranƒ±', f'%{success_rate:.1f}', '%70+',
             '‚úÖ' if success_rate >= 70 else '‚ö†Ô∏è' if success_rate >= 50 else '‚ùå',
             'Tespit yeteneƒüi'],
            ['Test Edilmeyen', str(not_tested), '<50',
             '‚úÖ' if not_tested < 50 else '‚ö†Ô∏è' if not_tested < 100 else '‚ùå',
             'Kapsam dƒ±≈üƒ±']
        ]
        
        # Renk ≈üemasƒ±
        cell_colors = []
        for i, row in enumerate(table_data):
            if i == 0:
                cell_colors.append([self.colors['accent_secondary']] * 5)
            else:
                row_colors = [self.colors['secondary']] * 5
                if '‚úÖ' in row[3]:
                    row_colors[3] = self.colors['success']
                elif '‚ö†Ô∏è' in row[3]:
                    row_colors[3] = self.colors['warning']
                elif '‚ùå' in row[3]:
                    row_colors[3] = self.colors['danger']
                cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors, colWidths=[0.2, 0.12, 0.12, 0.1, 0.36])
        
        table.auto_set_font_size(False)
        table.set_fontsize(11)
        table.scale(1.2, 2)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 1: Sonu√ß Deƒüerlendirme Tablosu',
                    fontsize=14, fontweight='bold', pad=20, color=self.colors['light'])
        
        fig.text(0.5, 0.02, f"{self.data['general']['company_name']} - {self.data['general']['report_date']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        
        # Kaydet
        if self.transparent_bg.get():
            plt.savefig(filepath, dpi=dpi, transparent=True, bbox_inches='tight')
        else:
            plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close() Kural', str(total), '300+', 
             '‚úÖ' if total >= 300 else '‚ö†Ô∏è' if total >= 200 else '‚ùå', 
             'Kapsam deƒüerlendirmesi'],
            ['Test Edilen', str(tested), '200+',
             '‚úÖ' if tested >= 200 else '‚ö†Ô∏è' if tested >= 100 else '‚ùå',
             'Test kapsamƒ±'],
            ['Ba≈üarƒ± Oranƒ±', f'%{success_rate:.1f}', '%70+',
             '‚úÖ' if success_rate >= 70 else '‚ö†Ô∏è' if success_rate >= 50 else '‚ùå',
             'Tespit yeteneƒüi'],
            ['Test Edilmeyen', str(not_tested), '<50',
             '‚úÖ' if not_tested < 50 else '‚ö†Ô∏è' if not_tested < 100 else '‚ùå',
             'Kapsam dƒ±≈üƒ±']
        ]
        
        # Renk ≈üemasƒ±
        cell_colors = []
        for i, row in enumerate(table_data):
            if i == 0:
                cell_colors.append([self.colors['accent_secondary']] * 5)
            else:
                row_colors = [self.colors['secondary']] * 5
                if '‚úÖ' in row[3]:
                    row_colors[3] = self.colors['success']
                elif '‚ö†Ô∏è' in row[3]:
                    row_colors[3] = self.colors['warning']
                elif '‚ùå' in row[3]:
                    row_colors[3] = self.colors['danger']
                cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors, colWidths=[0.2, 0.12, 0.12, 0.1, 0.36])
        
        table.auto_set_font_size(False)
        table.set_fontsize(11)
        table.scale(1.2, 2)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 1: Sonu√ß Deƒüerlendirme Tablosu',
                    fontsize=14, fontweight='bold', pad=20)
        
        fig.text(0.5, 0.02, f"{self.data['general']['company_name']} - {self.data['general']['report_date']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table2(self, filepath):
        """Table 2 - MITRE Kapsama - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        if not self.data['mitre_tactics']:
            return
        
        width = float(self.visual_settings['fig_width'].get())
        height = max(8, len(self.data['mitre_tactics']) * 0.6)
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        
        # ≈ûeffaf arkaplan
        if self.transparent_bg.get():
            fig.patch.set_facecolor('none')
            fig.patch.set_alpha(0)
        else:
            fig.patch.set_facecolor(self.colors['dark'])
        
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['Taktik', 'Test Edilen', 'Tetiklenen', 'Ba≈üarƒ± %', 'Kritiklik']
        rows = []
        
        sorted_tactics = sorted(self.data['mitre_tactics'].items(),
                              key=lambda x: x[1]['rate'])
        
        for tactic, values in sorted_tactics:
            kritiklik = 'Kritik' if values['rate'] < 40 else 'Orta' if values['rate'] < 60 else 'ƒ∞yi'
            rows.append([
                tactic,
                str(values['test']),
                str(values['triggered']),
                f"%{values['rate']:.1f}",
                kritiklik
            ])
        
        table_data = [headers] + rows
        
        # Renk ≈üemasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 5)
        
        for row in rows:
            row_colors = [self.colors['secondary']] * 5
            rate = float(row[3].strip('%'))
            if rate < 40:
                row_colors[3] = self.colors['danger']
                row_colors[4] = self.colors['danger']
            elif rate < 60:
                row_colors[3] = self.colors['warning']
                row_colors[4] = self.colors['warning']
            else:
                row_colors[3] = self.colors['success']
                row_colors[4] = self.colors['success']
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors, colWidths=[0.28, 0.15, 0.15, 0.15, 0.15])
        
        table.auto_set_font_size(False)
        table.set_fontsize(10)
        table.scale(1.2, 1.8)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 2: MITRE ATT&CK Kapsama Analizi',
                    fontsize=14, fontweight='bold', pad=20, color=self.colors['light'])
        
        # √ñzet
        avg_success = np.mean([v['rate'] for v in self.data['mitre_tactics'].values()])
        fig.text(0.5, 0.05, f'Ortalama Ba≈üarƒ±: %{avg_success:.1f}',
                ha='center', fontsize=10, color=self.colors['light'])
        fig.text(0.5, 0.02, f"{self.data['general']['company_name']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        
        # Kaydet
        if self.transparent_bg.get():
            plt.savefig(filepath, dpi=dpi, transparent=True, bbox_inches='tight')
        else:
            plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table3(self, filepath):
        """Table 3 - Tetiklenen Kurallar - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        if not self.data['triggered_rules']:
            return
        
        width = float(self.visual_settings['fig_width'].get())
        height = max(6, min(12, len(self.data['triggered_rules']) * 0.5))
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        
        # ≈ûeffaf arkaplan
        if self.transparent_bg.get():
            fig.patch.set_facecolor('none')
            fig.patch.set_alpha(0)
        else:
            fig.patch.set_facecolor(self.colors['dark'])
        
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['ID', 'Kural Adƒ±', 'MITRE Teknik', 'Taktik', 'G√ºven Skoru']
        rows = []
        
        for i, rule in enumerate(self.data['triggered_rules'][:20], 1):
            rows.append([
                str(i),
                rule['name'][:40] + '...' if len(rule['name']) > 40 else rule['name'],
                rule['mitre'],
                rule['tactic'],
                f"%{rule['confidence']}"
            ])
        
        table_data = [headers] + rows
        
        # Renk kodlamasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 5)
        
        for row in rows:
            row_colors = [self.colors['secondary']] * 5
            try:
                confidence = int(row[4].strip('%'))
                if confidence >= 90:
                    row_colors[4] = self.colors['success']
                elif confidence >= 80:
                    row_colors[4] = self.colors['warning']
                else:
                    row_colors[4] = self.colors['danger']
            except:
                pass
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors,
                        colWidths=[0.08, 0.38, 0.15, 0.2, 0.12])
        
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 1.8)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 3: Tetiklenen Korelasyon Kurallarƒ± Listesi',
                    fontsize=14, fontweight='bold', pad=20, color=self.colors['light'])
        
        fig.text(0.5, 0.02, f"Toplam {len(self.data['triggered_rules'])} kural - {self.data['general']['company_name']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        
        # Kaydet
        if self.transparent_bg.get():
            plt.savefig(filepath, dpi=dpi, transparent=True, bbox_inches='tight')
        else:
            plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table4(self, filepath):
        """Table 4 - Algƒ±lanamayan Teknikler - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        if not self.data['undetected_techniques']:
            return
        
        width = float(self.visual_settings['fig_width'].get())
        height = max(6, min(12, len(self.data['undetected_techniques']) * 0.5))
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        
        # ≈ûeffaf arkaplan
        if self.transparent_bg.get():
            fig.patch.set_facecolor('none')
            fig.patch.set_alpha(0)
        else:
            fig.patch.set_facecolor(self.colors['dark'])
        
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['MITRE ID', 'Teknik Adƒ±', 'Taktik', 'Kritiklik', '√ñncelik']
        rows = []
        
        # Kritiklik sƒ±ralama
        kritiklik_order = {'Kritik': 0, 'Y√ºksek': 1, 'Orta': 2, 'D√º≈ü√ºk': 3}
        sorted_techniques = sorted(self.data['undetected_techniques'],
                                 key=lambda x: kritiklik_order.get(x['criticality'], 4))
        
        for i, tech in enumerate(sorted_techniques[:20], 1):
            rows.append([
                tech['id'],
                tech['name'][:35] + '...' if len(tech['name']) > 35 else tech['name'],
                tech['tactic'],
                tech['criticality'],
                f"P{i}"
            ])
        
        table_data = [headers] + rows
        
        # Renk kodlamasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 5)
        
        for row in rows:
            row_colors = [self.colors['secondary']] * 5
            if 'Kritik' in row[3]:
                row_colors[3] = self.colors['danger']
                row_colors[4] = self.colors['danger']
            elif 'Y√ºksek' in row[3]:
                row_colors[3] = self.colors['warning']
                row_colors[4] = self.colors['warning']
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors,
                        colWidths=[0.12, 0.35, 0.2, 0.12, 0.1])
        
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 2)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 4: Algƒ±lanamayan MITRE Teknikleri Listesi',
                    fontsize=14, fontweight='bold', pad=20, color=self.colors['light'])
        
        kritik_count = sum(1 for t in self.data['undetected_techniques'] if t['criticality'] == 'Kritik')
        yuksek_count = sum(1 for t in self.data['undetected_techniques'] if t['criticality'] == 'Y√ºksek')
        
        fig.text(0.5, 0.02, f"‚ö†Ô∏è {kritik_count} Kritik, {yuksek_count} Y√ºksek seviyeli teknik i√ßin acil √∂nlem gerekli",
                ha='center', fontsize=10, weight='bold', color=self.colors['warning'])
        
        plt.tight_layout()
        
        # Kaydet
        if self.transparent_bg.get():
            plt.savefig(filepath, dpi=dpi, transparent=True, bbox_inches='tight')
        else:
            plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table5(self, filepath):
        """Table 5 - √ñneriler - TEMA VE ≈ûEFFAF ARKAPLAN DESTEKLƒ∞"""
        if not self.data['recommendations']:
            return
        
        width = float(self.visual_settings['fig_width'].get())
        height = max(6, min(12, len(self.data['recommendations']) * 0.6))
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        
        # ≈ûeffaf arkaplan
        if self.transparent_bg.get():
            fig.patch.set_facecolor('none')
            fig.patch.set_alpha(0)
        else:
            fig.patch.set_facecolor(self.colors['dark'])
        
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['√ñncelik', 'Kategori', '√ñneri', 'Beklenen Etki']
        rows = []
        
        for i, rec in enumerate(self.data['recommendations'][:15], 1):
            etki = 'Y√ºksek' if i <= 3 else 'Orta' if i <= 7 else 'Normal'
            rows.append([
                rec['priority'],
                rec['category'],
                rec['text'][:50] + '...' if len(rec['text']) > 50 else rec['text'],
                etki
            ])
        
        table_data = [headers] + rows
        
        # Renk kodlamasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 4)
        
        for i, row in enumerate(rows):
            row_colors = [self.colors['secondary']] * 4
            if i < 3:
                row_colors[0] = self.colors['danger']
                row_colors[3] = self.colors['success']
            elif i < 7:
                row_colors[0] = self.colors['warning']
                row_colors[3] = self.colors['warning']
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors,
                        colWidths=[0.1, 0.2, 0.45, 0.15])
        
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 2)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(4):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 5: Yazƒ±lmasƒ± Gereken Korelasyon Kurallarƒ±nƒ±n √ñneri Listesi',
                    fontsize=14, fontweight='bold', pad=20, color=self.colors['light'])
        
        fig.text(0.5, 0.03, f'Toplam {len(self.data["recommendations"])} √∂neri',
                ha='center', fontsize=9, style='italic', color=self.colors['success'])
        fig.text(0.5, 0.005, f"{self.data['general']['company_name']} - {self.data['general']['prepared_by']}",
                ha='center', fontsize=8, color=self.colors['gray'])
        
        plt.tight_layout()
        
        # Kaydet
        if self.transparent_bg.get():
            plt.savefig(filepath, dpi=dpi, transparent=True, bbox_inches='tight')
        else:
            plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()size=(width, height), dpi=100)
        fig.patch.set_facecolor(self.colors['dark'])
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['Taktik', 'Test Edilen', 'Tetiklenen', 'Ba≈üarƒ± %', 'Kritiklik']
        rows = []
        
        sorted_tactics = sorted(self.data['mitre_tactics'].items(),
                              key=lambda x: x[1]['rate'])
        
        for tactic, values in sorted_tactics:
            kritiklik = 'Kritik' if values['rate'] < 40 else 'Orta' if values['rate'] < 60 else 'ƒ∞yi'
            rows.append([
                tactic,
                str(values['test']),
                str(values['triggered']),
                f"%{values['rate']:.1f}",
                kritiklik
            ])
        
        table_data = [headers] + rows
        
        # Renk ≈üemasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 5)
        
        for row in rows:
            row_colors = [self.colors['secondary']] * 5
            rate = float(row[3].strip('%'))
            if rate < 40:
                row_colors[3] = self.colors['danger']
                row_colors[4] = self.colors['danger']
            elif rate < 60:
                row_colors[3] = self.colors['warning']
                row_colors[4] = self.colors['warning']
            else:
                row_colors[3] = self.colors['success']
                row_colors[4] = self.colors['success']
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors, colWidths=[0.28, 0.15, 0.15, 0.15, 0.15])
        
        table.auto_set_font_size(False)
        table.set_fontsize(10)
        table.scale(1.2, 1.8)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 2: MITRE ATT&CK Kapsama Analizi',
                    fontsize=14, fontweight='bold', pad=20)
        
        # √ñzet
        avg_success = np.mean([v['rate'] for v in self.data['mitre_tactics'].values()])
        fig.text(0.5, 0.05, f'Ortalama Ba≈üarƒ±: %{avg_success:.1f}',
                ha='center', fontsize=10, color=self.colors['light'])
        fig.text(0.5, 0.02, f"{self.data['general']['company_name']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table3(self, filepath):
        """Table 3 - Tetiklenen Kurallar"""
        if not self.data['triggered_rules']:
            return
        
        width = float(self.visual_settings['fig_width'].get())
        height = max(6, min(12, len(self.data['triggered_rules']) * 0.5))
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        fig.patch.set_facecolor(self.colors['dark'])
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['ID', 'Kural Adƒ±', 'MITRE Teknik', 'Taktik', 'G√ºven Skoru']
        rows = []
        
        for i, rule in enumerate(self.data['triggered_rules'][:20], 1):
            rows.append([
                str(i),
                rule['name'][:40] + '...' if len(rule['name']) > 40 else rule['name'],
                rule['mitre'],
                rule['tactic'],
                f"%{rule['confidence']}"
            ])
        
        table_data = [headers] + rows
        
        # Renk kodlamasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 5)
        
        for row in rows:
            row_colors = [self.colors['secondary']] * 5
            try:
                confidence = int(row[4].strip('%'))
                if confidence >= 90:
                    row_colors[4] = self.colors['success']
                elif confidence >= 80:
                    row_colors[4] = self.colors['warning']
                else:
                    row_colors[4] = self.colors['danger']
            except:
                pass
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors,
                        colWidths=[0.08, 0.38, 0.15, 0.2, 0.12])
        
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 1.8)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 3: Tetiklenen Korelasyon Kurallarƒ± Listesi',
                    fontsize=14, fontweight='bold', pad=20)
        
        fig.text(0.5, 0.02, f"Toplam {len(self.data['triggered_rules'])} kural - {self.data['general']['company_name']}",
                ha='center', fontsize=9, color=self.colors['gray'])
        
        plt.tight_layout()
        plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table4(self, filepath):
        """Table 4 - Algƒ±lanamayan Teknikler"""
        if not self.data['undetected_techniques']:
            return
        
        width = float(self.visual_settings['fig_width'].get())
        height = max(6, min(12, len(self.data['undetected_techniques']) * 0.5))
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        fig.patch.set_facecolor(self.colors['dark'])
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['MITRE ID', 'Teknik Adƒ±', 'Taktik', 'Kritiklik', '√ñncelik']
        rows = []
        
        # Kritiklik sƒ±ralama
        kritiklik_order = {'Kritik': 0, 'Y√ºksek': 1, 'Orta': 2, 'D√º≈ü√ºk': 3}
        sorted_techniques = sorted(self.data['undetected_techniques'],
                                 key=lambda x: kritiklik_order.get(x['criticality'], 4))
        
        for i, tech in enumerate(sorted_techniques[:20], 1):
            rows.append([
                tech['id'],
                tech['name'][:35] + '...' if len(tech['name']) > 35 else tech['name'],
                tech['tactic'],
                tech['criticality'],
                f"P{i}"
            ])
        
        table_data = [headers] + rows
        
        # Renk kodlamasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 5)
        
        for row in rows:
            row_colors = [self.colors['secondary']] * 5
            if 'Kritik' in row[3]:
                row_colors[3] = self.colors['danger']
                row_colors[4] = self.colors['danger']
            elif 'Y√ºksek' in row[3]:
                row_colors[3] = self.colors['warning']
                row_colors[4] = self.colors['warning']
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors,
                        colWidths=[0.12, 0.35, 0.2, 0.12, 0.1])
        
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 2)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(5):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 4: Algƒ±lanamayan MITRE Teknikleri Listesi',
                    fontsize=14, fontweight='bold', pad=20)
        
        kritik_count = sum(1 for t in self.data['undetected_techniques'] if t['criticality'] == 'Kritik')
        yuksek_count = sum(1 for t in self.data['undetected_techniques'] if t['criticality'] == 'Y√ºksek')
        
        fig.text(0.5, 0.02, f"‚ö†Ô∏è {kritik_count} Kritik, {yuksek_count} Y√ºksek seviyeli teknik i√ßin acil √∂nlem gerekli",
                ha='center', fontsize=10, weight='bold', color=self.colors['warning'])
        
        plt.tight_layout()
        plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()
    
    def generate_table5(self, filepath):
        """Table 5 - √ñneriler"""
        if not self.data['recommendations']:
            return
        
        width = float(self.visual_settings['fig_width'].get())
        height = max(6, min(12, len(self.data['recommendations']) * 0.6))
        dpi = int(self.visual_settings['fig_dpi'].get())
        
        fig, ax = plt.subplots(figsize=(width, height), dpi=100)
        fig.patch.set_facecolor(self.colors['dark'])
        ax.axis('tight')
        ax.axis('off')
        
        # Tablo verileri
        headers = ['√ñncelik', 'Kategori', '√ñneri', 'Beklenen Etki']
        rows = []
        
        for i, rec in enumerate(self.data['recommendations'][:15], 1):
            etki = 'Y√ºksek' if i <= 3 else 'Orta' if i <= 7 else 'Normal'
            rows.append([
                rec['priority'],
                rec['category'],
                rec['text'][:50] + '...' if len(rec['text']) > 50 else rec['text'],
                etki
            ])
        
        table_data = [headers] + rows
        
        # Renk kodlamasƒ±
        cell_colors = []
        cell_colors.append([self.colors['accent_secondary']] * 4)
        
        for i, row in enumerate(rows):
            row_colors = [self.colors['secondary']] * 4
            if i < 3:
                row_colors[0] = self.colors['danger']
                row_colors[3] = self.colors['success']
            elif i < 7:
                row_colors[0] = self.colors['warning']
                row_colors[3] = self.colors['warning']
            cell_colors.append(row_colors)
        
        # Tablo olu≈ütur
        table = ax.table(cellText=table_data, cellLoc='center', loc='center',
                        cellColours=cell_colors,
                        colWidths=[0.1, 0.2, 0.45, 0.15])
        
        table.auto_set_font_size(False)
        table.set_fontsize(9)
        table.scale(1.2, 2)
        
        # Ba≈ülƒ±k satƒ±rƒ±
        for i in range(4):
            cell = table[(0, i)]
            cell.set_text_props(weight='bold', color='white')
        
        ax.set_title('Table 5: Yazƒ±lmasƒ± Gereken Korelasyon Kurallarƒ±nƒ±n √ñneri Listesi',
                    fontsize=14, fontweight='bold', pad=20)
        
        fig.text(0.5, 0.03, f'Toplam {len(self.data["recommendations"])} √∂neri',
                ha='center', fontsize=9, style='italic', color=self.colors['success'])
        fig.text(0.5, 0.005, f"{self.data['general']['company_name']} - {self.data['general']['prepared_by']}",
                ha='center', fontsize=8, color=self.colors['gray'])
        
        plt.tight_layout()
        plt.savefig(filepath, dpi=dpi, facecolor=self.colors['dark'], bbox_inches='tight')
        plt.close()

def main():
    """Ana fonksiyon"""
    root = tk.Tk()
    
    # T√ºrk√ße karakter i√ßin sistem ayarƒ±
    try:
        root.tk.call('encoding', 'system', 'utf-8')
    except:
        pass
    
    app = IDCAFixedFinal(root)
    root.mainloop()

if __name__ == "__main__":
    main()
